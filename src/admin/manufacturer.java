/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package admin;
import login_register.*;
import login_register.distributor_landing;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLIntegrityConstraintViolationException;
import javax.swing.JOptionPane;
/**
 *
 * @author varsh
 */
public class manufacturer extends javax.swing.JFrame {

    /**
     * Creates new form welcome_page
     */
    public manufacturer() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        title = new javax.swing.JLabel();
        admin_button1 = new javax.swing.JButton();
        username_dis2 = new javax.swing.JTextField();
        main_panel = new javax.swing.JPanel();
        title1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        name = new javax.swing.JTextField();
        back_button = new javax.swing.JButton();
        search_button = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        id = new javax.swing.JTextField();
        street = new javax.swing.JTextField();
        area = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        city = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        phone_number = new javax.swing.JTextField();
        insert_button = new javax.swing.JButton();
        delete_button = new javax.swing.JButton();
        update_button = new javax.swing.JButton();
        clear_button = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        title.setFont(new java.awt.Font("Segoe UI Black", 1, 32)); // NOI18N
        title.setForeground(new java.awt.Color(0, 204, 204));
        title.setText("PHARMACY SUPPLY CHAIN");

        admin_button1.setBackground(new java.awt.Color(0, 204, 204));
        admin_button1.setFont(new java.awt.Font("Segoe UI", 1, 30)); // NOI18N
        admin_button1.setForeground(new java.awt.Color(255, 255, 255));
        admin_button1.setText("ADMIN");
        admin_button1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                admin_button1ActionPerformed(evt);
            }
        });

        username_dis2.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        main_panel.setBackground(new java.awt.Color(255, 255, 255));

        title1.setFont(new java.awt.Font("Segoe UI Black", 1, 32)); // NOI18N
        title1.setForeground(new java.awt.Color(0, 204, 204));
        title1.setText("MANUFACTURERS");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 204, 204));
        jLabel2.setText("ID");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 204, 204));
        jLabel3.setText("Name");

        name.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameActionPerformed(evt);
            }
        });

        back_button.setBackground(new java.awt.Color(0, 204, 204));
        back_button.setFont(new java.awt.Font("Segoe UI", 1, 30)); // NOI18N
        back_button.setForeground(new java.awt.Color(255, 255, 255));
        back_button.setText("‚Üê");
        back_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                back_buttonActionPerformed(evt);
            }
        });

        search_button.setBackground(new java.awt.Color(0, 204, 204));
        search_button.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        search_button.setForeground(new java.awt.Color(255, 255, 255));
        search_button.setText("SEARCH");
        search_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search_buttonActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 204, 204));
        jLabel4.setText("Contact Number");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 204, 204));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 204, 204));
        jLabel6.setText("Area");

        id.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        id.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idActionPerformed(evt);
            }
        });

        street.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        street.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                streetActionPerformed(evt);
            }
        });

        area.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        area.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                areaActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 204, 204));
        jLabel7.setText("Street");

        city.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        city.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cityActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 204, 204));
        jLabel8.setText("City");

        phone_number.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        phone_number.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                phone_numberActionPerformed(evt);
            }
        });

        insert_button.setBackground(new java.awt.Color(0, 204, 204));
        insert_button.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        insert_button.setForeground(new java.awt.Color(255, 255, 255));
        insert_button.setText("INSERT");
        insert_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insert_buttonActionPerformed(evt);
            }
        });

        delete_button.setBackground(new java.awt.Color(0, 204, 204));
        delete_button.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        delete_button.setForeground(new java.awt.Color(255, 255, 255));
        delete_button.setText("DELETE");
        delete_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delete_buttonActionPerformed(evt);
            }
        });

        update_button.setBackground(new java.awt.Color(0, 204, 204));
        update_button.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        update_button.setForeground(new java.awt.Color(255, 255, 255));
        update_button.setText("UPDATE");
        update_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                update_buttonActionPerformed(evt);
            }
        });

        clear_button.setBackground(new java.awt.Color(0, 204, 204));
        clear_button.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        clear_button.setForeground(new java.awt.Color(255, 255, 255));
        clear_button.setText("CLEAR");
        clear_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clear_buttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout main_panelLayout = new javax.swing.GroupLayout(main_panel);
        main_panel.setLayout(main_panelLayout);
        main_panelLayout.setHorizontalGroup(
            main_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(main_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(back_button)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(title1)
                .addGap(24, 24, 24))
            .addGroup(main_panelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(main_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(main_panelLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(main_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(main_panelLayout.createSequentialGroup()
                                .addGroup(main_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel8))
                                .addGap(152, 152, 152)
                                .addGroup(main_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(area, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(city)))
                            .addGroup(main_panelLayout.createSequentialGroup()
                                .addGroup(main_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3)
                                    .addGroup(main_panelLayout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel5)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(main_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(name, javax.swing.GroupLayout.DEFAULT_SIZE, 366, Short.MAX_VALUE)
                                    .addComponent(id)))
                            .addGroup(main_panelLayout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(phone_number))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, main_panelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(street, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(67, 67, 67))
                    .addGroup(main_panelLayout.createSequentialGroup()
                        .addComponent(insert_button)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(update_button)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(search_button)
                        .addGap(12, 12, 12)
                        .addComponent(delete_button)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(clear_button)
                        .addContainerGap(27, Short.MAX_VALUE))))
        );
        main_panelLayout.setVerticalGroup(
            main_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(main_panelLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(main_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(title1)
                    .addComponent(back_button, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(main_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(id, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(main_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(name, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(main_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(main_panelLayout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(jLabel5))
                    .addGroup(main_panelLayout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel7))
                    .addGroup(main_panelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(street, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(main_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addGroup(main_panelLayout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(area, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(main_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(city, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(15, 15, 15)
                .addGroup(main_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(phone_number, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addGroup(main_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(search_button)
                    .addComponent(insert_button)
                    .addComponent(delete_button)
                    .addComponent(update_button)
                    .addComponent(clear_button))
                .addGap(16, 16, 16))
        );

        getContentPane().add(main_panel, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 0, 670, 450));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/background.jpg"))); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(2, -16, 820, 480));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameActionPerformed

    private void admin_button1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_admin_button1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_admin_button1ActionPerformed

    private void back_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_back_buttonActionPerformed
        // TODO add your handling code here:
        admin_landing a = new admin_landing();
        dispose();
        a.setVisible(true);
        
    }//GEN-LAST:event_back_buttonActionPerformed

    private void search_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_search_buttonActionPerformed
     // Get the manufacturer_id to search from the text field
    String manufacturerIdToSearch = id.getText();

    // Check if the manufacturerIdToSearch is empty
    if (manufacturerIdToSearch.isEmpty()) {
        JOptionPane.showMessageDialog(null, "Please enter a manufacturer ID to search.", "Error", JOptionPane.ERROR_MESSAGE);
        return; // Exit the method if manufacturerIdToSearch is empty
    }

    Connection connection = null;
    try {
        // Establish a connection to your database
        connection = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:orcl", "scott", "tiger");

        // Create the SQL select command
        String sql = "SELECT * FROM manufacturer WHERE manufacturer_id = ?";
        PreparedStatement statement = connection.prepareStatement(sql);
        statement.setString(1, manufacturerIdToSearch);

        // Execute the select command
        ResultSet resultSet = statement.executeQuery();
        if (resultSet.next()) {
            // Retrieve the values from the result set
            String n_name = resultSet.getString("name");
            String n_street = resultSet.getString("street");
            String n_area = resultSet.getString("area");
            String n_city = resultSet.getString("city");
            String n_phoneNo = resultSet.getString("phone_no");

            // Display the retrieved values in your Swing UI (e.g., in text fields)
            name.setText(n_name);
            street.setText(n_street);
            area.setText(n_area);
            city.setText(n_city);
            phone_number.setText(n_phoneNo);
        } else {
            JOptionPane.showMessageDialog(null, "No data found for the given manufacturer ID.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Error searching data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    } finally {
        if (connection != null) {
            try {
                connection.close(); // Close the connection
            } catch (SQLException closeException) {
                JOptionPane.showMessageDialog(null, "Error closing connection: " + closeException.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    }//GEN-LAST:event_search_buttonActionPerformed

    private void idActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_idActionPerformed

    private void streetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_streetActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_streetActionPerformed

    private void areaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_areaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_areaActionPerformed

    private void cityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cityActionPerformed

    private void phone_numberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_phone_numberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_phone_numberActionPerformed

    private void insert_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insert_buttonActionPerformed
    // Get the data from the text fields
    String n_name = name.getText();
    String n_street = street.getText();
    String n_area = area.getText();
    String n_city = city.getText();
    String n_phoneNo = phone_number.getText();

    Connection connection = null;
    try {
        // Establish a connection to your database
        connection = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:orcl", "scott", "tiger");
        connection.setAutoCommit(false); // Set auto-commit to false

        // Construct the new manufacturer_id
        String manufacturerId = "u" + (getRowCount(connection, "manufacturer") + 1);

        // Create the SQL insert command
        String sql = "INSERT INTO manufacturer (manufacturer_id, name, street, area, city, phone_no) VALUES (?, ?, ?, ?, ?, ?)";
        PreparedStatement statement = connection.prepareStatement(sql);
        statement.setString(1, manufacturerId);
        statement.setString(2, n_name);
        statement.setString(3, n_street);
        statement.setString(4, n_area);
        statement.setString(5, n_city);
        statement.setString(6, n_phoneNo);

        // Execute the insert command
        int rowsInserted = statement.executeUpdate();
        if (rowsInserted > 0) {
            connection.commit(); // Commit the transaction
            JOptionPane.showMessageDialog(null, "Data inserted successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(null, "Error inserting data: No rows affected.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } catch (SQLIntegrityConstraintViolationException e) {
        JOptionPane.showMessageDialog(null, "Error inserting data: Duplicate primary key or constraint violation.", "Error", JOptionPane.ERROR_MESSAGE);
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Error inserting data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        if (connection != null) {
            try {
                connection.rollback(); // Rollback the transaction on error
            } catch (SQLException rollbackException) {
                JOptionPane.showMessageDialog(null, "Error rolling back transaction: " + rollbackException.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    } finally {
        if (connection != null) {
            try {
                connection.close(); // Close the connection
            } catch (SQLException closeException) {
                JOptionPane.showMessageDialog(null, "Error closing connection: " + closeException.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }


    }//GEN-LAST:event_insert_buttonActionPerformed
    private int getRowCount(Connection connection, String tableName) throws SQLException {
    PreparedStatement countStatement = connection.prepareStatement("SELECT COUNT(*) FROM " + tableName);
    ResultSet resultSet = countStatement.executeQuery();
    resultSet.next();
    return resultSet.getInt(1);
}
    private void delete_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delete_buttonActionPerformed
    // Get the manufacturer_id to delete from the text field
    String manufacturerIdToDelete = id.getText();

    // Check if the manufacturerIdToDelete is empty
    if (manufacturerIdToDelete.isEmpty()) {
        JOptionPane.showMessageDialog(null, "Please enter a manufacturer ID to delete.", "Error", JOptionPane.ERROR_MESSAGE);
        return; // Exit the method if manufacturerIdToDelete is empty
    }

    Connection connection = null;
    try {
        // Establish a connection to your database
        connection = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:orcl", "scott", "tiger");

        // Disable auto-commit mode
        connection.setAutoCommit(false);

        // Check if a row with the given manufacturer_id exists before delete
        PreparedStatement checkStatement = connection.prepareStatement("SELECT * FROM manufacturer WHERE manufacturer_id = ?");
        checkStatement.setString(1, manufacturerIdToDelete);
        ResultSet resultSet = checkStatement.executeQuery();
        if (!resultSet.next()) {
            JOptionPane.showMessageDialog(null, "No data found for the given manufacturer ID.", "Error", JOptionPane.ERROR_MESSAGE);
            return; // Exit the method if no matching row is found
        }

        // Create the SQL delete command
        String sql = "DELETE FROM manufacturer WHERE manufacturer_id = ?";
        PreparedStatement statement = connection.prepareStatement(sql);
        statement.setString(1, manufacturerIdToDelete);

        // Execute the delete command
        int rowsDeleted = statement.executeUpdate();
        if (rowsDeleted > 0) {
            connection.commit(); // Commit the transaction
            JOptionPane.showMessageDialog(null, "Data deleted successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(null, "Error deleting data: No rows affected.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Error deleting data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        if (connection != null) {
            try {
                connection.rollback(); // Rollback the transaction on error
            } catch (SQLException rollbackException) {
                JOptionPane.showMessageDialog(null, "Error rolling back transaction: " + rollbackException.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    } finally {
        if (connection != null) {
            try {
                connection.setAutoCommit(true); // Re-enable auto-commit
                connection.close(); // Close the connection
            } catch (SQLException closeException) {
                JOptionPane.showMessageDialog(null, "Error closing connection: " + closeException.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    }//GEN-LAST:event_delete_buttonActionPerformed

    private void update_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_update_buttonActionPerformed
   // Get the manufacturer_id to update from the text field
    String manufacturerIdToUpdate = id.getText();

    // Check if the manufacturerIdToUpdate is empty
    if (manufacturerIdToUpdate.isEmpty()) {
        JOptionPane.showMessageDialog(null, "Please enter a manufacturer ID to update.", "Error", JOptionPane.ERROR_MESSAGE);
        return; // Exit the method if manufacturerIdToUpdate is empty
    }

    Connection connection = null;
    try {
        // Establish a connection to your database
        connection = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:orcl", "scott", "tiger");

        // Disable auto-commit mode
        connection.setAutoCommit(false);

        // Check if a row with the given manufacturer_id exists before update
        PreparedStatement checkStatement = connection.prepareStatement("SELECT * FROM manufacturer WHERE manufacturer_id = ?");
        checkStatement.setString(1, manufacturerIdToUpdate);
        ResultSet resultSet = checkStatement.executeQuery();
        if (!resultSet.next()) {
            JOptionPane.showMessageDialog(null, "No data found for update.", "Error", JOptionPane.ERROR_MESSAGE);
            return; // Exit the method if no matching row is found
        }

        // Create the SQL update command based on non-empty fields
        StringBuilder updateSql = new StringBuilder("UPDATE manufacturer SET");
        boolean hasUpdates = false;

        String newName = name.getText();
        if (!newName.isEmpty()) {
            updateSql.append(" name = ?,");
            hasUpdates = true;
        }

        String newStreet = street.getText();
        if (!newStreet.isEmpty()) {
            updateSql.append(" street = ?,");
            hasUpdates = true;
        }

        String newArea = area.getText();
        if (!newArea.isEmpty()) {
            updateSql.append(" area = ?,");
            hasUpdates = true;
        }

        String newCity = city.getText();
        if (!newCity.isEmpty()) {
            updateSql.append(" city = ?,");
            hasUpdates = true;
        }

        String newPhoneNo = phone_number.getText();
        if (!newPhoneNo.isEmpty()) {
            updateSql.append(" phone_no = ?,");
            hasUpdates = true;
        }

        // Remove the last comma if there are updates
        if (hasUpdates) {
            updateSql.deleteCharAt(updateSql.length() - 1); // Remove the last comma
            updateSql.append(" WHERE manufacturer_id = ?");
        } else {
            JOptionPane.showMessageDialog(null, "No fields to update.", "Error", JOptionPane.ERROR_MESSAGE);
            return; // Exit the method if there are no fields to update
        }

        // Prepare the update statement
        PreparedStatement updateStatement = connection.prepareStatement(updateSql.toString());

        // Set parameter values for the update statement
        int parameterIndex = 1;
        if (!newName.isEmpty()) {
            updateStatement.setString(parameterIndex++, newName);
        }
        if (!newStreet.isEmpty()) {
            updateStatement.setString(parameterIndex++, newStreet);
        }
        if (!newArea.isEmpty()) {
            updateStatement.setString(parameterIndex++, newArea);
        }
        if (!newCity.isEmpty()) {
            updateStatement.setString(parameterIndex++, newCity);
        }
        if (!newPhoneNo.isEmpty()) {
            updateStatement.setString(parameterIndex++, newPhoneNo);
        }

        updateStatement.setString(parameterIndex, manufacturerIdToUpdate); // Set the manufacturer_id for WHERE clause

        // Execute the update command
        int rowsUpdated = updateStatement.executeUpdate();
        if (rowsUpdated > 0) {
            connection.commit(); // Commit the transaction
            JOptionPane.showMessageDialog(null, "Data updated successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(null, "Error updating data: No rows affected.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Error updating data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        if (connection != null) {
            try {
                connection.rollback(); // Rollback the transaction on error
            } catch (SQLException rollbackException) {
                JOptionPane.showMessageDialog(null, "Error rolling back transaction: " + rollbackException.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    } finally {
        if (connection != null) {
            try {
                connection.setAutoCommit(true); // Re-enable auto-commit
                connection.close(); // Close the connection
            } catch (SQLException closeException) {
                JOptionPane.showMessageDialog(null, "Error closing connection: " + closeException.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    }//GEN-LAST:event_update_buttonActionPerformed

    private void clear_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clear_buttonActionPerformed
        // TODO add your handling code here:
         // TODO add your handling code here:
        id.setText("");
        name.setText("");
        street.setText("");
        area.setText("");
        city.setText("");
        phone_number.setText("");
    }//GEN-LAST:event_clear_buttonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton admin_button1;
    private javax.swing.JTextField area;
    private javax.swing.JButton back_button;
    private javax.swing.JTextField city;
    private javax.swing.JButton clear_button;
    private javax.swing.JButton delete_button;
    private javax.swing.JTextField id;
    private javax.swing.JButton insert_button;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel main_panel;
    private javax.swing.JTextField name;
    private javax.swing.JTextField phone_number;
    private javax.swing.JButton search_button;
    private javax.swing.JTextField street;
    private javax.swing.JLabel title;
    private javax.swing.JLabel title1;
    private javax.swing.JButton update_button;
    private javax.swing.JTextField username_dis2;
    // End of variables declaration//GEN-END:variables
}
