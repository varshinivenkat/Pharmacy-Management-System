/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package admin;
import login_register.*;
import login_register.distributor_landing;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLIntegrityConstraintViolationException;
import javax.swing.JOptionPane;
/**
 *
 * @author varsh
 */
public class medicine extends javax.swing.JFrame {

    /**
     * Creates new form welcome_page
     */
    public medicine() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        title = new javax.swing.JLabel();
        admin_button1 = new javax.swing.JButton();
        username_dis2 = new javax.swing.JTextField();
        main_panel = new javax.swing.JPanel();
        title1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        name = new javax.swing.JTextField();
        back_button = new javax.swing.JButton();
        search_button = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        id = new javax.swing.JTextField();
        type = new javax.swing.JTextField();
        description = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        shelf_life = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        manufacturer_id = new javax.swing.JTextField();
        insert_button = new javax.swing.JButton();
        delete_button = new javax.swing.JButton();
        update_button = new javax.swing.JButton();
        clear_button = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        title.setFont(new java.awt.Font("Segoe UI Black", 1, 32)); // NOI18N
        title.setForeground(new java.awt.Color(0, 204, 204));
        title.setText("PHARMACY SUPPLY CHAIN");

        admin_button1.setBackground(new java.awt.Color(0, 204, 204));
        admin_button1.setFont(new java.awt.Font("Segoe UI", 1, 30)); // NOI18N
        admin_button1.setForeground(new java.awt.Color(255, 255, 255));
        admin_button1.setText("ADMIN");
        admin_button1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                admin_button1ActionPerformed(evt);
            }
        });

        username_dis2.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        main_panel.setBackground(new java.awt.Color(255, 255, 255));

        title1.setFont(new java.awt.Font("Segoe UI Black", 1, 32)); // NOI18N
        title1.setForeground(new java.awt.Color(0, 204, 204));
        title1.setText("MEDICINES");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 204, 204));
        jLabel2.setText("ID");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 204, 204));
        jLabel3.setText("Name");

        name.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameActionPerformed(evt);
            }
        });

        back_button.setBackground(new java.awt.Color(0, 204, 204));
        back_button.setFont(new java.awt.Font("Segoe UI", 1, 30)); // NOI18N
        back_button.setForeground(new java.awt.Color(255, 255, 255));
        back_button.setText("‚Üê");
        back_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                back_buttonActionPerformed(evt);
            }
        });

        search_button.setBackground(new java.awt.Color(0, 204, 204));
        search_button.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        search_button.setForeground(new java.awt.Color(255, 255, 255));
        search_button.setText("SEARCH");
        search_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search_buttonActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 204, 204));
        jLabel4.setText("Manufacturer ID");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 204, 204));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 204, 204));
        jLabel6.setText("Description");

        id.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        id.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idActionPerformed(evt);
            }
        });

        type.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        type.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeActionPerformed(evt);
            }
        });

        description.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        description.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                descriptionActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 204, 204));
        jLabel7.setText("Type");

        shelf_life.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        shelf_life.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shelf_lifeActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 204, 204));
        jLabel8.setText("Shelf Life");

        manufacturer_id.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        manufacturer_id.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manufacturer_idActionPerformed(evt);
            }
        });

        insert_button.setBackground(new java.awt.Color(0, 204, 204));
        insert_button.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        insert_button.setForeground(new java.awt.Color(255, 255, 255));
        insert_button.setText("INSERT");
        insert_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insert_buttonActionPerformed(evt);
            }
        });

        delete_button.setBackground(new java.awt.Color(0, 204, 204));
        delete_button.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        delete_button.setForeground(new java.awt.Color(255, 255, 255));
        delete_button.setText("DELETE");
        delete_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delete_buttonActionPerformed(evt);
            }
        });

        update_button.setBackground(new java.awt.Color(0, 204, 204));
        update_button.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        update_button.setForeground(new java.awt.Color(255, 255, 255));
        update_button.setText("UPDATE");
        update_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                update_buttonActionPerformed(evt);
            }
        });

        clear_button.setBackground(new java.awt.Color(0, 204, 204));
        clear_button.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        clear_button.setForeground(new java.awt.Color(255, 255, 255));
        clear_button.setText("CLEAR");
        clear_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clear_buttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout main_panelLayout = new javax.swing.GroupLayout(main_panel);
        main_panel.setLayout(main_panelLayout);
        main_panelLayout.setHorizontalGroup(
            main_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(main_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(back_button)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(title1)
                .addGap(24, 24, 24))
            .addGroup(main_panelLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(main_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(main_panelLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(manufacturer_id))
                    .addGroup(main_panelLayout.createSequentialGroup()
                        .addGroup(main_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel8))
                        .addGap(74, 74, 74)
                        .addGroup(main_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(type)
                            .addComponent(description)
                            .addComponent(shelf_life, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(main_panelLayout.createSequentialGroup()
                        .addGroup(main_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addGroup(main_panelLayout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel5)))
                        .addGap(138, 138, 138)
                        .addGroup(main_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(name)
                            .addComponent(id))))
                .addGap(67, 67, 67))
            .addGroup(main_panelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(insert_button)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(update_button)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(search_button)
                .addGap(12, 12, 12)
                .addComponent(delete_button)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(clear_button)
                .addContainerGap(27, Short.MAX_VALUE))
        );
        main_panelLayout.setVerticalGroup(
            main_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(main_panelLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(main_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(title1)
                    .addComponent(back_button, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(main_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(id, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(main_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(name, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(main_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(main_panelLayout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(jLabel5))
                    .addGroup(main_panelLayout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel7))
                    .addGroup(main_panelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(main_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addGroup(main_panelLayout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(description, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(main_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(shelf_life, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(main_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(manufacturer_id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addGroup(main_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(search_button)
                    .addComponent(insert_button)
                    .addComponent(delete_button)
                    .addComponent(update_button)
                    .addComponent(clear_button))
                .addGap(16, 16, 16))
        );

        getContentPane().add(main_panel, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 0, 670, 450));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/background.jpg"))); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(2, -16, 800, 480));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameActionPerformed

    private void admin_button1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_admin_button1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_admin_button1ActionPerformed

    private void back_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_back_buttonActionPerformed
        // TODO add your handling code here:
        admin_landing a = new admin_landing();
        dispose();
        a.setVisible(true);
        
    }//GEN-LAST:event_back_buttonActionPerformed

    private void search_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_search_buttonActionPerformed
    // Get the values from the input fields
    // Get the medicine_id to search from the text field
    String medicineIdToSearch = id.getText();
  
    // Check if the medicineIdToSearch is empty
    if (medicineIdToSearch.isEmpty()) {
        JOptionPane.showMessageDialog(null, "Please enter a medicine ID to search.", "Error", JOptionPane.ERROR_MESSAGE);
        return; // Exit the method if medicineIdToSearch is empty
    }

    Connection connection = null;
    try {
        // Establish a connection to your database
        connection = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:orcl", "scott", "tiger");

        // Create the SQL select command
        String sql = "SELECT * FROM medicine WHERE medicine_id = ?";
        PreparedStatement statement = connection.prepareStatement(sql);
        statement.setString(1, medicineIdToSearch);

        // Execute the select command
        ResultSet resultSet = statement.executeQuery();
        if (resultSet.next()) {
            // Retrieve the values from the result set
            String m_name = resultSet.getString("name");
            String m_type = resultSet.getString("type");
            String m_description = resultSet.getString("description");
            int m_shelfLife = resultSet.getInt("shelf_life");
            String m_manufacturerId = resultSet.getString("manufacturer_id");

            // Display the retrieved values in your Swing UI (e.g., in text fields)
            name.setText(m_name);
            type.setText(m_type);
            description.setText(m_description);
            shelf_life.setText(String.valueOf(m_shelfLife));
            manufacturer_id.setText(m_manufacturerId);
        } else {
            JOptionPane.showMessageDialog(null, "No data found for the given medicine ID.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Error searching data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    } finally {
        if (connection != null) {
            try {
                connection.close(); // Close the connection
            } catch (SQLException closeException) {
                JOptionPane.showMessageDialog(null, "Error closing connection: " + closeException.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    }//GEN-LAST:event_search_buttonActionPerformed

    private void idActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_idActionPerformed

    private void typeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_typeActionPerformed

    private void descriptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_descriptionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_descriptionActionPerformed

    private void shelf_lifeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shelf_lifeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_shelf_lifeActionPerformed

    private void manufacturer_idActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manufacturer_idActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_manufacturer_idActionPerformed

    private void insert_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insert_buttonActionPerformed
        // TODO add your handling code here:
               // Get the data from the text fields
    String n_name = name.getText();
    String n_type = type.getText();
    String n_description = description.getText();
    String n_manufacturerId = manufacturer_id.getText();
    int n_shelfLife;

    try {
        n_shelfLife = Integer.parseInt(shelf_life.getText()); // Convert shelf_life to integer
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(null, "Invalid shelf_life value. Please enter a valid integer.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    Connection connection = null;
    try {
        // Establish a connection to your database
        connection = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:orcl", "scott", "tiger");
        connection.setAutoCommit(false);
        // Construct the new medicine_id
        String medicineId = "m0" + (getRowCount(connection, "medicine") + 1);

        // Create the SQL insert command
        String sql = "INSERT INTO medicine (medicine_id, name, type, description, manufacturer_id, shelf_life) VALUES (?, ?, ?, ?, ?, ?)";
        PreparedStatement statement = connection.prepareStatement(sql);
        statement.setString(1, medicineId);
        statement.setString(2, n_name);
        statement.setString(3, n_type);
        statement.setString(4, n_description);
        statement.setString(5, n_manufacturerId);
        statement.setInt(6, n_shelfLife); // Set shelf_life as int value

        // Execute the insert command
        int rowsInserted = statement.executeUpdate();
        if (rowsInserted > 0) {
            connection.commit(); // Commit the transaction
            JOptionPane.showMessageDialog(null, "Data inserted successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(null, "Error inserting data: No rows affected.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } catch (SQLIntegrityConstraintViolationException e) {
        String errorMessage;
        if (e.getSQLState().equals("23000")) { // SQL state for integrity constraint violation
            if (e.getMessage().contains("ORA-02291")) { // Foreign key violation
                errorMessage = "Error inserting data: Foreign key constraint violated. Manufacturer ID does not exist.";
            } else if (e.getMessage().contains("ORA-00001")) { // Unique constraint violation
                errorMessage = "Error inserting data: Duplicate primary key or unique constraint violation.";
            } else {
                errorMessage = "Error inserting data: Constraint violation.";
            }
        } else {
            errorMessage = "Error inserting data: " + e.getMessage();
        }
        JOptionPane.showMessageDialog(null, errorMessage, "Error", JOptionPane.ERROR_MESSAGE);
        if (connection != null) {
            try {
                connection.rollback(); // Rollback the transaction on error
            } catch (SQLException rollbackException) {
                JOptionPane.showMessageDialog(null, "Error rolling back transaction: " + rollbackException.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Error inserting data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        if (connection != null) {
            try {
                connection.rollback(); // Rollback the transaction on error
            } catch (SQLException rollbackException) {
                JOptionPane.showMessageDialog(null, "Error rolling back transaction: " + rollbackException.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    } finally {
        if (connection != null) {
            try {
                connection.close(); // Close the connection
            } catch (SQLException closeException) {
                JOptionPane.showMessageDialog(null, "Error closing connection: " + closeException.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    } 
    }//GEN-LAST:event_insert_buttonActionPerformed
    private int getRowCount(Connection connection, String tableName) throws SQLException {
    PreparedStatement countStatement = connection.prepareStatement("SELECT COUNT(*) FROM " + tableName);
    ResultSet resultSet = countStatement.executeQuery();
    resultSet.next();
    return resultSet.getInt(1);
}
    private void delete_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delete_buttonActionPerformed
        // TODO add your handling code here:
         // TODO add your handling code here:
        Connection connection = null;
        String medicineIdToDelete = id.getText();
        
        try {
        // Establish a connection to your database
        connection = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:orcl", "scott", "tiger");
        connection.setAutoCommit(false);
        // Create the SQL delete command
        String sql = "DELETE FROM medicine WHERE medicine_id = ?";
        PreparedStatement statement = connection.prepareStatement(sql);
        statement.setString(1, medicineIdToDelete);

        // Execute the delete command
        int rowsDeleted = statement.executeUpdate();
        if (rowsDeleted > 0) {
            connection.commit(); // Commit the transaction
            JOptionPane.showMessageDialog(null, "Data deleted successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(null, "No data found for deletion.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Error deleting data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    } finally {
        if (connection != null) {
            try {
                connection.close(); // Close the connection
            } catch (SQLException closeException) {
                JOptionPane.showMessageDialog(null, "Error closing connection: " + closeException.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    }//GEN-LAST:event_delete_buttonActionPerformed

    private void update_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_update_buttonActionPerformed
       // TODO add your handling code here:
       // TODO add your handling code here:
        String medicineIdToUpdate = id.getText();

        // Check if the medicineIdToUpdate is empty
        if (medicineIdToUpdate.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please enter a medicine ID to update.", "Error", JOptionPane.ERROR_MESSAGE);
            return; // Exit the method if medicineIdToUpdate is empty
        }

        Connection connection = null;
        try {
            // Establish a connection to your database
            connection = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:orcl", "scott", "tiger");

            // Disable auto-commit mode
            connection.setAutoCommit(false);

            // Check if a row with the given medicine_id exists before update
            PreparedStatement checkStatement = connection.prepareStatement("SELECT * FROM medicine WHERE medicine_id = ?");
            checkStatement.setString(1, medicineIdToUpdate);
            ResultSet resultSet = checkStatement.executeQuery();
            if (!resultSet.next()) {
                JOptionPane.showMessageDialog(null, "No data found for update.", "Error", JOptionPane.ERROR_MESSAGE);
                return; // Exit the method if no matching row is found
            }

            // Create the SQL update command based on non-empty fields
            StringBuilder updateSql = new StringBuilder("UPDATE medicine SET");
            boolean hasUpdates = false;

            String newName = name.getText();
            if (!newName.isEmpty()) {
                updateSql.append(" name = ?,");
                hasUpdates = true;
            }

            String newType = type.getText();
            if (!newType.isEmpty()) {
                updateSql.append(" type = ?,");
                hasUpdates = true;
            }

            String newDescription = description.getText();
            if (!newDescription.isEmpty()) {
                updateSql.append(" description = ?,");
                hasUpdates = true;
            }

            String newShelfLifeStr = shelf_life.getText();
            if (!newShelfLifeStr.isEmpty()) {
                try {
                    int newShelfLife = Integer.parseInt(newShelfLifeStr);
                    updateSql.append(" shelf_life = ?,");
                    hasUpdates = true;
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(null, "Shelf life must be a valid integer.", "Error", JOptionPane.ERROR_MESSAGE);
                    return; // Exit the method if shelf life is not a valid integer
                }
            }

            // Remove the last comma if there are updates
            if (hasUpdates) {
                updateSql.deleteCharAt(updateSql.length() - 1); // Remove the last comma
                updateSql.append(" WHERE medicine_id = ?");
            } else {
                JOptionPane.showMessageDialog(null, "No fields to update.", "Error", JOptionPane.ERROR_MESSAGE);
                return; // Exit the method if there are no fields to update
            }

            // Prepare the update statement
            PreparedStatement updateStatement = connection.prepareStatement(updateSql.toString());

            // Set parameter values for the update statement
            int parameterIndex = 1;
            if (!newName.isEmpty()) {
                updateStatement.setString(parameterIndex++, newName);
            }
            if (!newType.isEmpty()) {
                updateStatement.setString(parameterIndex++, newType);
            }
            if (!newDescription.isEmpty()) {
                updateStatement.setString(parameterIndex++, newDescription);
            }
            if (!newShelfLifeStr.isEmpty()) {
                updateStatement.setInt(parameterIndex++, Integer.parseInt(newShelfLifeStr));
            }

            updateStatement.setString(parameterIndex, medicineIdToUpdate); // Set the medicine_id for WHERE clause

            // Execute the update command
            int rowsUpdated = updateStatement.executeUpdate();
            if (rowsUpdated > 0) {
                connection.commit(); // Commit the transaction
                JOptionPane.showMessageDialog(null, "Data updated successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(null, "Error updating data: No rows affected.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error updating data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            if (connection != null) {
                try {
                    connection.rollback(); // Rollback the transaction on error
                } catch (SQLException rollbackException) {
                    JOptionPane.showMessageDialog(null, "Error rolling back transaction: " + rollbackException.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        } finally {
            if (connection != null) {
                try {
                    connection.setAutoCommit(true); // Re-enable auto-commit
                    connection.close(); // Close the connection
                } catch (SQLException closeException) {
                    JOptionPane.showMessageDialog(null, "Error closing connection: " + closeException.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        } 
    }//GEN-LAST:event_update_buttonActionPerformed

    private void clear_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clear_buttonActionPerformed
        // TODO add your handling code here:
         // TODO add your handling code here:
        id.setText("");
        name.setText("");
        type.setText("");
        description.setText("");
        shelf_life.setText("");
        manufacturer_id.setText("");
    }//GEN-LAST:event_clear_buttonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton admin_button1;
    private javax.swing.JButton back_button;
    private javax.swing.JButton clear_button;
    private javax.swing.JButton delete_button;
    private javax.swing.JTextField description;
    private javax.swing.JTextField id;
    private javax.swing.JButton insert_button;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel main_panel;
    private javax.swing.JTextField manufacturer_id;
    private javax.swing.JTextField name;
    private javax.swing.JButton search_button;
    private javax.swing.JTextField shelf_life;
    private javax.swing.JLabel title;
    private javax.swing.JLabel title1;
    private javax.swing.JTextField type;
    private javax.swing.JButton update_button;
    private javax.swing.JTextField username_dis2;
    // End of variables declaration//GEN-END:variables
}
